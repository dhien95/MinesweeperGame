#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Minesweeper
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Minesweeper")]
	public partial class DB_MinesweeperDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCapDo(CapDo instance);
    partial void UpdateCapDo(CapDo instance);
    partial void DeleteCapDo(CapDo instance);
    partial void InsertCell(Cell instance);
    partial void UpdateCell(Cell instance);
    partial void DeleteCell(Cell instance);
    partial void InsertLuotChoi(LuotChoi instance);
    partial void UpdateLuotChoi(LuotChoi instance);
    partial void DeleteLuotChoi(LuotChoi instance);
    #endregion
		
		public DB_MinesweeperDataContext() : 
				base(global::Minesweeper.Properties.Settings.Default.MinesweeperConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB_MinesweeperDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_MinesweeperDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_MinesweeperDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_MinesweeperDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CapDo> CapDos
		{
			get
			{
				return this.GetTable<CapDo>();
			}
		}
		
		public System.Data.Linq.Table<Cell> Cells
		{
			get
			{
				return this.GetTable<Cell>();
			}
		}
		
		public System.Data.Linq.Table<LuotChoi> LuotChois
		{
			get
			{
				return this.GetTable<LuotChoi>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CapDo")]
	public partial class CapDo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maCapDo;
		
		private string _tenCapDo;
		
		private System.Nullable<int> _soMin;
		
		private System.Nullable<int> _soCot;
		
		private System.Nullable<int> _soDong;
		
		private EntitySet<LuotChoi> _LuotChois;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaCapDoChanging(int value);
    partial void OnmaCapDoChanged();
    partial void OntenCapDoChanging(string value);
    partial void OntenCapDoChanged();
    partial void OnsoMinChanging(System.Nullable<int> value);
    partial void OnsoMinChanged();
    partial void OnsoCotChanging(System.Nullable<int> value);
    partial void OnsoCotChanged();
    partial void OnsoDongChanging(System.Nullable<int> value);
    partial void OnsoDongChanged();
    #endregion
		
		public CapDo()
		{
			this._LuotChois = new EntitySet<LuotChoi>(new Action<LuotChoi>(this.attach_LuotChois), new Action<LuotChoi>(this.detach_LuotChois));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCapDo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int maCapDo
		{
			get
			{
				return this._maCapDo;
			}
			set
			{
				if ((this._maCapDo != value))
				{
					this.OnmaCapDoChanging(value);
					this.SendPropertyChanging();
					this._maCapDo = value;
					this.SendPropertyChanged("maCapDo");
					this.OnmaCapDoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tenCapDo", DbType="NVarChar(50)")]
		public string tenCapDo
		{
			get
			{
				return this._tenCapDo;
			}
			set
			{
				if ((this._tenCapDo != value))
				{
					this.OntenCapDoChanging(value);
					this.SendPropertyChanging();
					this._tenCapDo = value;
					this.SendPropertyChanged("tenCapDo");
					this.OntenCapDoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_soMin", DbType="Int")]
		public System.Nullable<int> soMin
		{
			get
			{
				return this._soMin;
			}
			set
			{
				if ((this._soMin != value))
				{
					this.OnsoMinChanging(value);
					this.SendPropertyChanging();
					this._soMin = value;
					this.SendPropertyChanged("soMin");
					this.OnsoMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_soCot", DbType="Int")]
		public System.Nullable<int> soCot
		{
			get
			{
				return this._soCot;
			}
			set
			{
				if ((this._soCot != value))
				{
					this.OnsoCotChanging(value);
					this.SendPropertyChanging();
					this._soCot = value;
					this.SendPropertyChanged("soCot");
					this.OnsoCotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_soDong", DbType="Int")]
		public System.Nullable<int> soDong
		{
			get
			{
				return this._soDong;
			}
			set
			{
				if ((this._soDong != value))
				{
					this.OnsoDongChanging(value);
					this.SendPropertyChanging();
					this._soDong = value;
					this.SendPropertyChanged("soDong");
					this.OnsoDongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapDo_LuotChoi", Storage="_LuotChois", ThisKey="maCapDo", OtherKey="maCapDo")]
		public EntitySet<LuotChoi> LuotChois
		{
			get
			{
				return this._LuotChois;
			}
			set
			{
				this._LuotChois.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LuotChois(LuotChoi entity)
		{
			this.SendPropertyChanging();
			entity.CapDo = this;
		}
		
		private void detach_LuotChois(LuotChoi entity)
		{
			this.SendPropertyChanging();
			entity.CapDo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cell")]
	public partial class Cell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maCell;
		
		private System.Nullable<int> _cellState;
		
		private System.Nullable<int> _cellType;
		
		private int _maLuotChoi;
		
		private EntityRef<LuotChoi> _LuotChoi;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaCellChanging(int value);
    partial void OnmaCellChanged();
    partial void OncellStateChanging(System.Nullable<int> value);
    partial void OncellStateChanged();
    partial void OncellTypeChanging(System.Nullable<int> value);
    partial void OncellTypeChanged();
    partial void OnmaLuotChoiChanging(int value);
    partial void OnmaLuotChoiChanged();
    #endregion
		
		public Cell()
		{
			this._LuotChoi = default(EntityRef<LuotChoi>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCell", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int maCell
		{
			get
			{
				return this._maCell;
			}
			set
			{
				if ((this._maCell != value))
				{
					this.OnmaCellChanging(value);
					this.SendPropertyChanging();
					this._maCell = value;
					this.SendPropertyChanged("maCell");
					this.OnmaCellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cellState", DbType="Int")]
		public System.Nullable<int> cellState
		{
			get
			{
				return this._cellState;
			}
			set
			{
				if ((this._cellState != value))
				{
					this.OncellStateChanging(value);
					this.SendPropertyChanging();
					this._cellState = value;
					this.SendPropertyChanged("cellState");
					this.OncellStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cellType", DbType="Int")]
		public System.Nullable<int> cellType
		{
			get
			{
				return this._cellType;
			}
			set
			{
				if ((this._cellType != value))
				{
					this.OncellTypeChanging(value);
					this.SendPropertyChanging();
					this._cellType = value;
					this.SendPropertyChanged("cellType");
					this.OncellTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maLuotChoi", DbType="Int NOT NULL")]
		public int maLuotChoi
		{
			get
			{
				return this._maLuotChoi;
			}
			set
			{
				if ((this._maLuotChoi != value))
				{
					if (this._LuotChoi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaLuotChoiChanging(value);
					this.SendPropertyChanging();
					this._maLuotChoi = value;
					this.SendPropertyChanged("maLuotChoi");
					this.OnmaLuotChoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LuotChoi_Cell", Storage="_LuotChoi", ThisKey="maLuotChoi", OtherKey="maLuotChoi", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LuotChoi LuotChoi
		{
			get
			{
				return this._LuotChoi.Entity;
			}
			set
			{
				LuotChoi previousValue = this._LuotChoi.Entity;
				if (((previousValue != value) 
							|| (this._LuotChoi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LuotChoi.Entity = null;
						previousValue.Cells.Remove(this);
					}
					this._LuotChoi.Entity = value;
					if ((value != null))
					{
						value.Cells.Add(this);
						this._maLuotChoi = value.maLuotChoi;
					}
					else
					{
						this._maLuotChoi = default(int);
					}
					this.SendPropertyChanged("LuotChoi");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LuotChoi")]
	public partial class LuotChoi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maLuotChoi;
		
		private System.Nullable<int> _thoiGian;
		
		private string _tenNguoiChoi;
		
		private int _maCapDo;
		
		private EntitySet<Cell> _Cells;
		
		private EntityRef<CapDo> _CapDo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaLuotChoiChanging(int value);
    partial void OnmaLuotChoiChanged();
    partial void OnthoiGianChanging(System.Nullable<int> value);
    partial void OnthoiGianChanged();
    partial void OntenNguoiChoiChanging(string value);
    partial void OntenNguoiChoiChanged();
    partial void OnmaCapDoChanging(int value);
    partial void OnmaCapDoChanged();
    #endregion
		
		public LuotChoi()
		{
			this._Cells = new EntitySet<Cell>(new Action<Cell>(this.attach_Cells), new Action<Cell>(this.detach_Cells));
			this._CapDo = default(EntityRef<CapDo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maLuotChoi", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int maLuotChoi
		{
			get
			{
				return this._maLuotChoi;
			}
			set
			{
				if ((this._maLuotChoi != value))
				{
					this.OnmaLuotChoiChanging(value);
					this.SendPropertyChanging();
					this._maLuotChoi = value;
					this.SendPropertyChanged("maLuotChoi");
					this.OnmaLuotChoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thoiGian", DbType="Int")]
		public System.Nullable<int> thoiGian
		{
			get
			{
				return this._thoiGian;
			}
			set
			{
				if ((this._thoiGian != value))
				{
					this.OnthoiGianChanging(value);
					this.SendPropertyChanging();
					this._thoiGian = value;
					this.SendPropertyChanged("thoiGian");
					this.OnthoiGianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tenNguoiChoi", DbType="NVarChar(50)")]
		public string tenNguoiChoi
		{
			get
			{
				return this._tenNguoiChoi;
			}
			set
			{
				if ((this._tenNguoiChoi != value))
				{
					this.OntenNguoiChoiChanging(value);
					this.SendPropertyChanging();
					this._tenNguoiChoi = value;
					this.SendPropertyChanged("tenNguoiChoi");
					this.OntenNguoiChoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCapDo", DbType="Int NOT NULL")]
		public int maCapDo
		{
			get
			{
				return this._maCapDo;
			}
			set
			{
				if ((this._maCapDo != value))
				{
					if (this._CapDo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaCapDoChanging(value);
					this.SendPropertyChanging();
					this._maCapDo = value;
					this.SendPropertyChanged("maCapDo");
					this.OnmaCapDoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LuotChoi_Cell", Storage="_Cells", ThisKey="maLuotChoi", OtherKey="maLuotChoi")]
		public EntitySet<Cell> Cells
		{
			get
			{
				return this._Cells;
			}
			set
			{
				this._Cells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapDo_LuotChoi", Storage="_CapDo", ThisKey="maCapDo", OtherKey="maCapDo", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CapDo CapDo
		{
			get
			{
				return this._CapDo.Entity;
			}
			set
			{
				CapDo previousValue = this._CapDo.Entity;
				if (((previousValue != value) 
							|| (this._CapDo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapDo.Entity = null;
						previousValue.LuotChois.Remove(this);
					}
					this._CapDo.Entity = value;
					if ((value != null))
					{
						value.LuotChois.Add(this);
						this._maCapDo = value.maCapDo;
					}
					else
					{
						this._maCapDo = default(int);
					}
					this.SendPropertyChanged("CapDo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cells(Cell entity)
		{
			this.SendPropertyChanging();
			entity.LuotChoi = this;
		}
		
		private void detach_Cells(Cell entity)
		{
			this.SendPropertyChanging();
			entity.LuotChoi = null;
		}
	}
}
#pragma warning restore 1591
